ggplot2::ggsave("bic_grid_plot.png", MURPNestedGridPlot(murpResult = result))
MURP(sdata, fast=TRUE)
x=MURP(sdata, fast=TRUE)
x=MURP(sdata[,1:30], fast=TRUE)
x=MURP(sdata[,1:10], fast=TRUE)
x=MURP(sdata[,1:10], fast=FALSE)
MURP(sdata, fast=TRUE)
x=MURP(sdata, fast=TRUE)
x=MURP(sdata[,1:5],fast=TRUE)
x=MURP(sdata[,1:10],fast=TRUE)
x=MURP(sdata[,1:10],fast=FALSE)
x=MURP(sdata[,1:10],fast=TRUE)
check()
build(".")
check(".")
`build(`
build()
check(".")
build()
<img src="figure/figure2.png" width="600">
<img src="figure/figure4.png" width="600">
ggplot2::ggsave("bic_plot.png", KBicPlot(murpResult = result), width = 4, height = 4)
ggplot2::ggsave("bic_grid_plot.png", MURPNestedGridPlot(murpResult = result), width = 4, height = 4)
p <- ggplot(df, aes(x = X1, y = X2, color = col)) +
geom_point(size = 1.5, alpha = 0.5) +
scale_color_manual(NULL,values = c("blue", "grey"),
labels = c("murps", "original cell")) +
labs(x = "UMAP-1", y = "UMAP-1") +
theme(panel.background = element_rect(fill='transparent', color="black"),
legend.key = element_rect(fill = "white"),
panel.grid.minor=element_blank(),
panel.grid.major=element_blank(),
legend.key.size = unit(0.9, "cm") )
ggsave("umap.png", p, width = 4, height = 3)
p <- ggplot(df, aes(x = X1, y = X2, color = col)) +
geom_point(size = 1.2, alpha = 0.5) +
scale_color_manual(NULL,values = c("blue", "grey"),
labels = c("murps", "original cell")) +
labs(x = "UMAP-1", y = "UMAP-1") +
theme(panel.background = element_rect(fill='transparent', color="black"),
legend.key = element_rect(fill = "white"),
panel.grid.minor=element_blank(),
panel.grid.major=element_blank(),
legend.key.size = unit(0.9, "cm") )
ggsave("umap.png", p, width = 4, height = 3)
ggsave("umap.png", p, width = 4.5, height = 3)
library(devtools)
data(sdata)
#' MURP.Kmeans
#' @importFrom parallel makeCluster stopCluster clusterExport parLapply
#' @importFrom NPflow mvnpdfC
#'
#' @export
#' @noRd
#'
MURP.Kmeans <- function(Data,
cores = 1,
iter = 20,
omega = 1/50,
seed = 723,
fast = FALSE,
cluster_iter_max = 1000){
cat('Initiating ...        ',date(),'\n')
CellNum <- dim(Data)[1]
GeneNum <- dim(Data)[2]
cat('K-Means calculating   ',date(),'\n')
clsSave <- list()
k <- c()
Loglike <- c()
BIC <- c()
Step <- c()
Penalty <- c()
maxK <- round(CellNum * 1)
K_series <- ceiling(quantile(1:maxK, 0.5))
min_k <- round(K_series * 1)
step <- 0
for (i in 1:iter) {
cat('Iter',i,'              ',date(),'\n')
if (i != 1 & step <= 1) {
cat('Step less than 1,stop iter \n')
break()
}
if (i != 1) {
min_k <- k[which(BIC == min(BIC))]
}
step <- (maxK*1) * 1/2^(i + 1)
K_series <- ceiling(c(max(min_k - step, 2),
min(min_k + step,maxK - 1)))
cat('Step:',step,'  k:',min_k,'\n')
cat(K_series,'\n')
cl <- makeCluster(cores)
clusterExport(cl, c("seed", "Data", "K_series"), envir = environment())
cls <- parLapply(cl, K_series, function(Centers){
set.seed(seed)
kmeans(Data, centers = Centers, iter.max = cluster_iter_max)
})
stopCluster(cl)
gc()
for(r in 1:length(cls) ){
clsSave[[dim(cls[[r]]$centers)[1]]] <- cls[[r]]
}
K_series_len <- length(K_series)
if(fast){
Loglike_iter <-  unlist(pblapply(1:K_series_len,
function(l){FastLogLikly(Data = Data,
centers = cls[[l]]$centers,
cluster = cls[[l]]$cluster,
K = K_series[l]) }))
}else{
Loglike_iter <-  unlist(pblapply(1:K_series_len,
function(l){LogLikly(Data = Data,
centers = cls[[l]]$centers,
cluster = cls[[l]]$cluster,
K = K_series[l],
cores = cores ) }))
}
a <- 1 + 1e-9
gamma <- sqrt(a * K_series * K_series * log(GeneNum))
if(fast){
penalty <- (1/100 * omega) * (1 + gamma) * log(GeneNum) * K_series
}else{
penalty <- (6 * omega) * (1 + gamma) * log(GeneNum) * K_series
}
BIC_iter <- penalty - 2 * Loglike_iter
k <- append(k, K_series)
Penalty <- append(Penalty, penalty)
Loglike <- append(Loglike, Loglike_iter)
BIC <- append(BIC, BIC_iter)
Step <- append(Step, step)
if ((min_k - step < 1 || min_k + step > CellNum - 1)) {
break
}
}
Recommended_K <- k[which(BIC == min(BIC))[1]]
command <- paste('Data =',dim(Data)[1],'*',dim(Data)[2],
'omega =', omega,
'cores =',cores,
'iter =',iter)
final <- list(k = k,
Step = Step,
Loglike = Loglike,
BIC = BIC,
Penalty = Penalty,
Recommended_K = Recommended_K,
Recommended_K_cl = clsSave[[Recommended_K]],
Command = command,
cl = clsSave,
rawdata = Data)
cat('BIC completed         ',date(),'\n')
return(final)
}
load_all()
install.packages("mbkmeans")
library(BiocManager)
install("mbkmeans")
install("ClusterR")
#' MURP.Kmeans
#' @importFrom parallel makeCluster stopCluster clusterExport parLapply
#' @importFrom NPflow mvnpdfC
#'
#' @export
#' @noRd
#'
MURP.Kmeans <- function(Data,
cores = 1,
iter = 20,
omega = 1/50,
seed = 723,
fast = FALSE,
cluster_iter_max = 1000){
cat('Initiating ...        ',date(),'\n')
CellNum <- dim(Data)[1]
GeneNum <- dim(Data)[2]
cat('K-Means calculating   ',date(),'\n')
clsSave <- list()
k <- c()
Loglike <- c()
BIC <- c()
Step <- c()
Penalty <- c()
maxK <- round(CellNum * 1)
K_series <- ceiling(quantile(1:maxK, 0.5))
min_k <- round(K_series * 1)
step <- 0
for (i in 1:iter) {
cat('Iter',i,'              ',date(),'\n')
if (i != 1 & step <= 1) {
cat('Step less than 1,stop iter \n')
break()
}
if (i != 1) {
min_k <- k[which(BIC == min(BIC))]
}
step <- (maxK*1) * 1/2^(i + 1)
K_series <- ceiling(c(max(min_k - step, 2),
min(min_k + step,maxK - 1)))
cat('Step:',step,'  k:',min_k,'\n')
cat(K_series,'\n')
cl <- makeCluster(cores)
clusterExport(cl, c("seed", "Data", "K_series"), envir = environment())
cls <- parLapply(cl, K_series, function(Centers){
set.seed(seed)
kmeans(Data, centers = Centers, iter.max = cluster_iter_max)
})
stopCluster(cl)
gc()
for(r in 1:length(cls) ){
clsSave[[dim(cls[[r]]$centers)[1]]] <- cls[[r]]
}
K_series_len <- length(K_series)
if(fast){
Loglike_iter <-  unlist(pblapply(1:K_series_len,
function(l){FastLogLikly(Data = Data,
centers = cls[[l]]$centers,
cluster = cls[[l]]$cluster,
K = K_series[l]) }))
}else{
Loglike_iter <-  unlist(pblapply(1:K_series_len,
function(l){LogLikly(Data = Data,
centers = cls[[l]]$centers,
cluster = cls[[l]]$cluster,
K = K_series[l],
cores = cores ) }))
}
a <- 1 + 1e-9
gamma <- sqrt(a * K_series * K_series * log(GeneNum))
if(fast){
penalty <- (1/100 * omega) * (1 + gamma) * log(GeneNum) * K_series
}else{
penalty <- (6 * omega) * (1 + gamma) * log(GeneNum) * K_series
}
BIC_iter <- penalty - 2 * Loglike_iter
k <- append(k, K_series)
Penalty <- append(Penalty, penalty)
Loglike <- append(Loglike, Loglike_iter)
BIC <- append(BIC, BIC_iter)
Step <- append(Step, step)
if ((min_k - step < 1 || min_k + step > CellNum - 1)) {
break
}
}
Recommended_K <- k[which(BIC == min(BIC))[1]]
command <- paste('Data =',dim(Data)[1],'*',dim(Data)[2],
'omega =', omega,
'cores =',cores,
'iter =',iter)
final <- list(k = k,
Step = Step,
Loglike = Loglike,
BIC = BIC,
Penalty = Penalty,
Recommended_K = Recommended_K,
Recommended_K_cl = clsSave[[Recommended_K]],
Command = command,
cl = clsSave,
rawdata = Data)
cat('BIC completed         ',date(),'\n')
return(final)
}
#' MURP.Kmeans.pca
#' @importFrom parallel makeCluster stopCluster clusterExport parLapply
#' @importFrom NPflow mvnpdfC irlba
#'
#' @export
#' @noRd
#'
MURP.Kmeans.pca <- function(Data,
cores = 1,
iter = 20,
omega = 1/50,
seed = 723,
fast = FALSE,
cluster_iter_max = 1000,
center = F,
scale = F,
pc_number = 30){
cat('Initiating ...        ',date(),'\n')
CellNum <- dim(Data)[1]
GeneNum <- dim(Data)[2]
cat('PCA ...        ',date(),'\n')
pca = irlba::prcomp_irlba(Data, center = center, scale. = center, n = pc_number)
pca_dat = pca$x[,1:pc_number]
cat('K-Means calculating   ',date(),'\n')
clsSave <- list()
k <- c()
Loglike <- c()
BIC <- c()
Step <- c()
Penalty <- c()
maxK <- round(CellNum * 1)
K_series <- ceiling(quantile(1:maxK, 0.5))
min_k <- round(K_series * 1)
step <- 0
for (i in 1:iter) {
cat('Iter',i,'              ',date(),'\n')
if (i != 1 & step <= 1) {
cat('Step less than 1,stop iter \n')
break()
}
if (i != 1) {
min_k <- k[which(BIC == min(BIC))]
}
step <- (maxK*1) * 1/2^(i + 1)
K_series <- ceiling(c(max(min_k - step, 2),
min(min_k + step,maxK - 1)))
cat('Step:',step,'  k:',min_k,'\n')
cat(K_series,'\n')
cl <- makeCluster(cores)
clusterExport(cl, c("seed", "Data", "pca_dat", "K_series"), envir = environment())
cls <- parLapply(cl, K_series, function(Centers){
set.seed(seed)
tmp = kmeans(pca_dat, centers = Centers, iter.max = cluster_iter_max)
cluster = tmp$cluster
cluster_factor = factor(cluster, levels = 1:length(unique(cluster)))
tapply(1:CellNum, cluster_factor,
function(x, y) {
# Data[x,,drop=F]
apply(Data[x,,drop=F], 2, mean)
}) -> tmplist
centers = do.call(rbind, tmplist)
return(list(cluster = cluster, centers = centers))
})
stopCluster(cl)
gc()
for(r in 1:length(cls) ){
clsSave[[dim(cls[[r]]$centers)[1]]] <- cls[[r]]
}
K_series_len <- length(K_series)
if(fast){
Loglike_iter <-  unlist(pblapply(1:K_series_len,
function(l){FastLogLikly(Data = Data,
centers = cls[[l]]$centers,
cluster = cls[[l]]$cluster,
K = K_series[l]) }))
}else{
Loglike_iter <-  unlist(pblapply(1:K_series_len,
function(l){LogLikly(Data = Data,
centers = cls[[l]]$centers,
cluster = cls[[l]]$cluster,
K = K_series[l],
cores = cores ) }))
}
a <- 1 + 1e-9
gamma <- sqrt(a * K_series * K_series * log(GeneNum))
if(fast){
penalty <- (1/100 * omega) * (1 + gamma) * log(GeneNum) * K_series
}else{
penalty <- (6 * omega) * (1 + gamma) * log(GeneNum) * K_series
}
BIC_iter <- penalty - 2 * Loglike_iter
k <- append(k, K_series)
Penalty <- append(Penalty, penalty)
Loglike <- append(Loglike, Loglike_iter)
BIC <- append(BIC, BIC_iter)
Step <- append(Step, step)
if ((min_k - step < 1 || min_k + step > CellNum - 1)) {
break
}
}
Recommended_K <- k[which(BIC == min(BIC))[1]]
command <- paste('Data =',dim(Data)[1],'*',dim(Data)[2],
'omega =', omega,
'cores =',cores,
'iter =',iter)
final <- list(k = k,
Step = Step,
Loglike = Loglike,
BIC = BIC,
Penalty = Penalty,
Recommended_K = Recommended_K,
Recommended_K_cl = clsSave[[Recommended_K]],
Command = command,
cl = clsSave,
rawdata = Data)
cat('BIC completed         ',date(),'\n')
return(final)
}
#' BicSpan.Kmeans
#'
#' @importFrom parallel makeCluster stopCluster clusterExport parLapply
#' @importFrom NPflow mvnpdfC
#'
#' @export
#' @noRd
#'
murp_specific_Kmeans <- function(Data,
cores = 1,
K = NULL,
omega = 1/50,
seed = 723,
fast = FALSE,
cluster_iter_max = 1000){
cat('Initiating ...        ',date(),'\n')
a = 1 + 1e-9
CellNum <- dim(Data)[1]
GeneNum <- dim(Data)[2]
cat('K-Means calculating   ',date(),'\n')
cat('K:',K,'\n')
set.seed(seed)
cls <- kmeans(Data, centers = K, iter.max = cluster_iter_max)
if(fast){
Loglike_iter = FastLogLikly(Data = Data,
centers = cls$centers,
cluster = cls$cluster,
K = K)
}else{
Loglike_iter = LogLikly(Data = Data,
centers = cls$centers,
cluster = cls$cluster,
K = K,
cores = cores )
}
gamma <- sqrt(a * K * K * log(GeneNum))
penalty <- (6 * omega) * (1 + gamma) * log(GeneNum) * K
BIC_iter <- penalty - 2 * Loglike_iter
command <- paste('Data =', dim(Data)[1],'*',dim(Data)[2],
'omega = ', omega,
'cores =', cores,
'K =', K)
final <- list(k = K,
Loglike = Loglike_iter,
BIC = BIC_iter,
Penalty = penalty,
Recommended_K = K,
Command = command,
cl = cls)
cat('BIC completed         ',date(),'\n')
gc()
return(final)
}
x = MURP.Kmeans.pca(sdata)
MURP.Kmeans.pca(sdata, omega = 0.1, iter=10, cores=2)
gc()
MURP.Kmeans.pca(sdata, omega = 0.1, iter=10, cores=1, fast = T)
x = MURP.Kmeans.pca(sdata, omega = 0.1, iter=10, cores=1, fast = T)
check(.)
check()
load(".")
load_all(".")
check(".")
build(".")
check(".")
build()
paste("Function: MURP.Kmeans.pca \n",
'| Data =',dim(Data)[1],'*',dim(Data)[2],
'| omega =', omega,
'| cores =',cores,
'| iter =',iter,
'| fast = ', fast,
'| seed = ', seed,
'| cluster_iter_max = ', cluster_iter_max,
'| center =', center,
'| scale =', scale,
'| pc_number =', pc_number)
Data = sdata
paste("Function: MURP.Kmeans.pca \n",
'| Data =',dim(Data)[1],'*',dim(Data)[2],
'| omega =', omega,
'| cores =',cores,
'| iter =',iter,
'| fast = ', fast,
'| seed = ', seed,
'| cluster_iter_max = ', cluster_iter_max,
'| center =', center,
'| scale =', scale,
'| pc_number =', pc_number)
omega = 0.1
paste("Function: MURP.Kmeans.pca \n",
'| Data =',dim(Data)[1],'*',dim(Data)[2],
'| omega =', omega,
'| cores =',cores,
'| iter =',iter,
'| fast = ', fast,
'| seed = ', seed,
'| cluster_iter_max = ', cluster_iter_max,
'| center =', center,
'| scale =', scale,
'| pc_number =', pc_number)
cores = 1
iter=10
fast = T
seed=723
cluster_iter_max = 100
center = T
scale = F
pc_number = 30
paste("Function: MURP.Kmeans.pca \n",
'| Data =',dim(Data)[1],'*',dim(Data)[2],
'| omega =', omega,
'| cores =',cores,
'| iter =',iter,
'| fast = ', fast,
'| seed = ', seed,
'| cluster_iter_max = ', cluster_iter_max,
'| center =', center,
'| scale =', scale,
'| pc_number =', pc_number)
paste("Function: MURP.Kmeans.pca",
'| Data =',dim(Data)[1],'*',dim(Data)[2],
'| omega =', omega,
'| cores =',cores,
'| iter =',iter,
'| fast = ', fast,
'| seed = ', seed,
'| cluster_iter_max = ', cluster_iter_max,
'| center =', center,
'| scale =', scale,
'| pc_number =', pc_number)
check(".")
build(".")
check()
build()
