labels=c("MISC_Kmeans", "orig_Kmeans")) +
scale_x_discrete(breaks = NULL) +
facet_grid(index~datalabel, scales = "free_y") +
theme(legend.position = "top")
p1 <- p + rj.ftheme.facet2
ggsave("hclust_int_bar_facet2.pdf", grid.draw(GridColor(p1)), width = 18, height = 7, limitsize = FALSE)
ggsave("hclust_int_bar_facet2.pdf", grid.draw(GridColor(p1)), width = 18, height = 6, limitsize = FALSE)
kmed_int_index_df$index[which(kmed_int_index_df$index=='RT')] = 'RTI'
kmed_int_index_df <- kmed_int_index_df[which(kmed_int_index_df$index!="PBM" & kmed_int_index_df$index!="RLI"),]
dff <- melt(kmed_int_index_df, id.vars = colnames(kmed_int_index_df)[c(1,4:10)])
dff$datalabel <-factor(dff$datalabel, level = label)
o <- sample(1:19,1)
#
# 1
#
p <- ggplot(dff, aes(x = datalabel, y = value, fill = variable )) +
#p <- ggplot(dff, aes(x = variable, y = value, fill = as.factor(variable) )) +
#geom_line(size = 3, shape = 15, alpha = 0.7) +
#geom_line(size = 1, alpha = 0.8, color = scol[[o]][9]) +
geom_bar(stat="identity", position = position_dodge(), alpha = 0.7, width = 0.5) +
labs(x = "Different Datasets", #title = "Internal Evaluation Indicators Compare",
y = "Indicator Value" ) +
scale_fill_d3("category20",
name="Methods",
#breaks=c("mick", "sdata"),
labels=c("MISC_Kmeans", "orig_Kmeans")) +
#facet_grid(index~datalabel, scales = "free_y") +
facet_grid(index~., scales = "free_y") +
theme(legend.position = "top")
p1 <- p + rj.ftheme.facet3
ggsave("kmed_int_bar_facet.pdf", grid.draw(GridColor(p1)), width = 23, height = 10, limitsize = FALSE)
#
# 2
#
p <- ggplot(dff, aes(x = variable, y = value, fill = as.factor(variable) )) +
geom_bar(stat="identity", position = position_dodge(), alpha = 0.7, width = 0.5) +
labs(x = "Different Datasets", #title = "Internal Evaluation Indicators Compare",
y = "Indicator Value" ) +
scale_fill_d3("category20",
name="Methods",
#breaks=c("mick", "sdata"),
labels=c("MISC_Kmeans", "orig_Kmeans")) +
scale_x_discrete(breaks = NULL) +
facet_grid(index~datalabel, scales = "free_y") +
theme(legend.position = "top")
p1 <- p + rj.ftheme.facet2
ggsave("kmed_int_bar_facet2.pdf", grid.draw(GridColor(p1)), width = 18, height = 6, limitsize = FALSE)
pagerank_int_index_df$index[which(pagerank_int_index_df$index=='RT')] = 'RTI'
pagerank_int_index_df <- pagerank_int_index_df[which(pagerank_int_index_df$index!="PBM" & pagerank_int_index_df$index!="RLI"),]
dff <- melt(pagerank_int_index_df, id.vars = colnames(pagerank_int_index_df)[c(1,4:10)])
dff$datalabel <-factor(dff$datalabel, level = label)
o <- sample(1:19,1)
#
# 1
#
p <- ggplot(dff, aes(x = datalabel, y = value, fill = variable )) +
#p <- ggplot(dff, aes(x = variable, y = value, fill = as.factor(variable) )) +
#geom_line(size = 3, shape = 15, alpha = 0.7) +
#geom_line(size = 1, alpha = 0.8, color = scol[[o]][9]) +
geom_bar(stat="identity", position = position_dodge(), alpha = 0.7, width = 0.5) +
labs(x = "Different Datasets", #title = "Internal Evaluation Indicators Compare",
y = "Indicator Value" ) +
scale_fill_d3("category20",
name="Methods",
#breaks=c("mick", "sdata"),
labels=c("MISC_Kmeans", "orig_Kmeans")) +
#scale_x_discrete(breaks = NULL) +
#facet_grid(index~datalabel, scales = "free_y") +
facet_grid(index~., scales = "free_y") +
theme(legend.position = "top")
p1 <- p + rj.ftheme.facet3
ggsave("pagerank_int_bar_facet.pdf", grid.draw(GridColor(p1)), width = 23, height = 10, limitsize = FALSE)
#
# 2
#
p <- ggplot(dff, aes(x = variable, y = value, fill = as.factor(variable) )) +
geom_bar(stat="identity", position = position_dodge(), alpha = 0.7, width = 0.5) +
labs(x = "Different Datasets", #title = "Internal Evaluation Indicators Compare",
y = "Indicator Value" ) +
scale_fill_d3("category20",
name="Methods",
#breaks=c("mick", "sdata"),
labels=c("MISC_Kmeans", "orig_Kmeans")) +
scale_x_discrete(breaks = NULL) +
facet_grid(index~datalabel, scales = "free_y") +
theme(legend.position = "top")
p1 <- p + rj.ftheme.facet2
ggsave("pagerank_int_bar_facet2.pdf", grid.draw(GridColor(p1)), width = 18, height = 6, limitsize = FALSE)
load("/run/user/1000/gvfs/sftp:host=59.77.18.162,user=renjun/home/renjun/project/MISC/normalize_data/louvain_pagerank_int_index_df.rda")
louvain_pagerank_int_index_df$index[which(louvain_pagerank_int_index_df$index=='RT')] = 'RTI'
louvain_pagerank_int_index_df <- louvain_pagerank_int_index_df[which(louvain_pagerank_int_index_df$index!="PBM" & louvain_pagerank_int_index_df$index!="RLI"),]
dff <- melt(louvain_pagerank_int_index_df, id.vars = colnames(louvain_pagerank_int_index_df)[c(1,4:10)])
dff$datalabel <-factor(dff$datalabel, level = label)
o <- sample(1:19,1)
#
# 1
#
p <- ggplot(dff, aes(x = datalabel, y = value, fill = variable )) +
#p <- ggplot(dff, aes(x = variable, y = value, fill = as.factor(variable) )) +
#geom_line(size = 3, shape = 15, alpha = 0.7) +
#geom_line(size = 1, alpha = 0.8, color = scol[[o]][9]) +
geom_bar(stat="identity", position = position_dodge(), alpha = 0.7, width = 0.5) +
labs(x = "Different Datasets", #title = "Internal Evaluation Indicators Compare",
y = "Indicator Value" ) +
scale_fill_d3("category20",
name="Methods",
#breaks=c("mick", "sdata"),
labels=c("MISC_Kmeans", "orig_Kmeans")) +
#scale_x_discrete(breaks = NULL) +
#facet_grid(index~datalabel, scales = "free_y") +
facet_grid(index~., scales = "free_y") +
theme(legend.position = "top")
p1 <- p + rj.ftheme.facet3
ggsave("louvain_pagerank_int_bar_facet.pdf", grid.draw(GridColor(p1)), width = 23, height = 10, limitsize = FALSE)
#
# 2
#
p <- ggplot(dff, aes(x = variable, y = value, fill = as.factor(variable) )) +
geom_bar(stat="identity", position = position_dodge(), alpha = 0.7, width = 0.5) +
labs(x = "Different Datasets", #title = "Internal Evaluation Indicators Compare",
y = "Indicator Value" ) +
scale_fill_d3("category20",
name="Methods",
#breaks=c("mick", "sdata"),
labels=c("MISC_Kmeans", "orig_Kmeans")) +
scale_x_discrete(breaks = NULL) +
facet_grid(index~datalabel, scales = "free_y") +
theme(legend.position = "top")
p1 <- p + rj.ftheme.facet2
ggsave("louvain_pagerank_int_bar_facet2.pdf", grid.draw(GridColor(p1)), width = 18, height = 6, limitsize = FALSE)
library(microbenchmark)
??dmvnorm
microbenchmark(mvnfast::dmvn(rep(1,100), mu = rep(0, 100), sigma = diag(0.5, 100), log = TRUE),
NPflow::mvnpdfC(as.matrix(rep(1,100)), mean = rep(0, CellNum), varcovM = diag(0.5, 100), Log = TRUE),
mvtnorm::dmvnorm(rep(1,100), mean = rep(0, 100), sigma = diag(0.5, 100), log = FALSE),
times = 1)
microbenchmark(mvnfast::dmvn(rep(1,100), mu = rep(0, 100), sigma = diag(0.5, 100), log = TRUE),
NPflow::mvnpdfC(as.matrix(rep(1,100)), mean = rep(0, 100), varcovM = diag(0.5, 100), Log = TRUE),
mvtnorm::dmvnorm(rep(1,100), mean = rep(0, 100), sigma = diag(0.5, 100), log = FALSE),
times = 1)
microbenchmark(mvnfast::dmvn(rep(1,100), mu = rep(0, 100), sigma = diag(0.5, 100), log = TRUE),
NPflow::mvnpdfC(as.matrix(rep(1,100)), mean = rep(0, 100), varcovM = diag(0.5, 100), Log = TRUE),
mvtnorm::dmvnorm(rep(1,100), mean = rep(0, 100), sigma = diag(0.5, 100), log = FALSE),
times = 10)
microbenchmark(mvnfast::dmvn(rep(1,100), mu = rep(0, 100), sigma = diag(0.5, 100), log = TRUE),
NPflow::mvnpdfC(as.matrix(rep(1,100)), mean = rep(0, 100), varcovM = diag(0.5, 100), Log = TRUE),
mvtnorm::dmvnorm(rep(1,100), mean = rep(0, 100), sigma = diag(0.5, 100), log = FALSE),
times = 10)
microbenchmark(mvnfast::dmvn(rep(1,1000), mu = rep(0, 1000), sigma = diag(0.5, 1000), log = TRUE),
NPflow::mvnpdfC(as.matrix(rep(1,1000)), mean = rep(0, 1000), varcovM = diag(0.5, 1000), Log = TRUE),
mvtnorm::dmvnorm(rep(1,1000), mean = rep(0, 1000), sigma = diag(0.5, 1000), log = FALSE),
times = 10)
microbenchmark(mvnfast::dmvn(rep(1,1000), mu = rep(0, 1000), sigma = diag(0.5, 1000), log = TRUE),
NPflow::mvnpdfC(as.matrix(rep(1,1000)), mean = rep(0, 1000), varcovM = diag(0.5, 1000), Log = TRUE),
mvtnorm::dmvnorm(rep(1,1000), mean = rep(0, 1000), sigma = diag(0.5, 1000), log = FALSE),
times = 10)
n <- 5000
microbenchmark(mvnfast::dmvn(rep(1,n), mu = rep(0, n), sigma = diag(0.5, n), log = TRUE),
NPflow::mvnpdfC(as.matrix(rep(1,n)), mean = rep(0, n), varcovM = diag(0.5, n), Log = TRUE),
mvtnorm::dmvnorm(rep(1,n), mean = rep(0, n), sigma = diag(0.5, n), log = FALSE),
times = 10)
knitr::opts_chunk$set(echo = TRUE)
timec <- microbenchmark(mvnfast::dmvn(rep(1,n), mu = rep(0,n), sigma = diag(0.5,n), log = TRUE),
NPflow::mvnpdfC(as.matrix(rep(1,n)), mean = rep(0,n), varcovM = diag(0.5,n), Log = TRUE),
mvtnorm::dmvnorm(rep(1,n), mean = rep(0,n), sigma = diag(0.5,n), log = FALSE),
times = 10)
timec
library(microbenchmark)
n <- 100
timec <- microbenchmark(mvnfast::dmvn(rep(1,n), mu = rep(0,n), sigma = diag(0.5,n), log = TRUE),
NPflow::mvnpdfC(as.matrix(rep(1,n)), mean = rep(0,n), varcovM = diag(0.5,n), Log = TRUE),
mvtnorm::dmvnorm(rep(1,n), mean = rep(0,n), sigma = diag(0.5,n), log = FALSE),
times = 1)
timec
plot(timec)
library(microbenchmark)
n <- 1000
timec <- microbenchmark(mvnfast::dmvn(rep(1,n), mu = rep(0,n), sigma = diag(0.5,n), log = TRUE),
NPflow::mvnpdfC(as.matrix(rep(1,n)), mean = rep(0,n), varcovM = diag(0.5,n), Log = TRUE),
mvtnorm::dmvnorm(rep(1,n), mean = rep(0,n), sigma = diag(0.5,n), log = FALSE),
times = 5)
plot(timec)
timec <- microbenchmark(dmvn,
NPflow::mvnpdfC(as.matrix(rep(1,n)), mean = rep(0,n), varcovM = diag(0.5,n), Log = TRUE),
mvtnorm::dmvnorm(rep(1,n), mean = rep(0,n), sigma = diag(0.5,n), log = FALSE),
times = 1)
plot(timec, xlim = c("dmvn","mvnpdfC","dmvnorm"))
plot(timec)
??plot
?plot
timec
n <- 100
timec <- microbenchmark(mvnfast::dmvn(rep(1,n), mu = rep(0,n), sigma = diag(0.5,n), log = TRUE),
NPflow::mvnpdfC(as.matrix(rep(1,n)), mean = rep(0,n), varcovM = diag(0.5,n), Log = TRUE),
mvtnorm::dmvnorm(rep(1,n), mean = rep(0,n), sigma = diag(0.5,n), log = FALSE),
times = 1)
plot(timec)
timec
library(microbenchmark)
n <- 100
timec <- microbenchmark(mvnfast::dmvn(rep(1,n), mu=rep(0,n),sigma=diag(0.5,n),log=TRUE),
NPflow::mvnpdfC(as.matrix(rep(1,n)),mean=rep(0,n), varcovM=diag(0.5,n),Log=TRUE),
mvtnorm::dmvnorm(rep(1,n), mean = rep(0,n), sigma=diag(0.5,n),log=FALSE),
times = 1)
plot(timec)
timec
library(microbenchmark)
n <- 100
timec <- microbenchmark(mvnfast::dmvn(rep(1,n),mu=rep(0,n),sigma=diag(0.5,n),log=TRUE),
NPflow::mvnpdfC(as.matrix(rep(1,n)),mean=rep(0,n),varcovM=diag(0.5,n),Log=TRUE),
mvtnorm::dmvnorm(rep(1,n),mean=rep(0,n),sigma=diag(0.5,n),log=FALSE),
times = 1)
plot(timec)
timec
timec$expr
timec$time
plot(x = c("dmvn", "mvnpdfC", "dmvnorm"),
y = c(1,2,3))
plot(x = c("dmvn", "mvnpdfC", "dmvnorm"),
y = c(1,2,3))
df <- data.frame((expr = c("dmvn", "mvnpdfC", "dmvnorm"),
time(ms) = c(1,2,3))
df <- data.frame(expr = c("dmvn", "mvnpdfC", "dmvnorm"),time(ms) = c(1,2,3))
df <- data.frame(expr = c("dmvn", "mvnpdfC", "dmvnorm"),
time_ms = c(1,2,3))
df
plot(df)
timec
timec$time
timec
timec
timec
timec
timec
gc()
gc()
library(microbenchmark)
n <- 1000
timec <- microbenchmark(mvnfast::dmvn(rep(1,n),mu=rep(0,n),sigma=diag(0.5,n),log=TRUE),
NPflow::mvnpdfC(as.matrix(rep(1,n)),mean=rep(0,n),varcovM=diag(0.5,n),Log=TRUE),
mvtnorm::dmvnorm(rep(1,n),mean=rep(0,n),sigma=diag(0.5,n),log=FALSE),
times = 5)
library(microbenchmark)
n <- 1000
timec <- microbenchmark(mvnfast::dmvn(rep(1,n),mu=rep(0,n),sigma=diag(0.5,n),log=TRUE),
NPflow::mvnpdfC(as.matrix(rep(1,n)),mean=rep(0,n),varcovM=diag(0.5,n),Log=TRUE),
mvtnorm::dmvnorm(rep(1,n),mean=rep(0,n),sigma=diag(0.5,n),log=FALSE),
times = 5)
timec
?adjust
??adjust
?p.adjust
library(devtools)
check(".")
build_manual(".")
?nls
check(".")
data(sdata)
dim(sdata)
load_all(".")
check_built(".")
check_built(".")
check(".")
check(".")
load_all()
MURP(sdata)
gc()
MURP(sdata)
load_all(".")
MURP(sdata)
gc()
build_manual(".")
build_manual(".")
check(".")
build_manual(".")
load_all(".")
MURP(sdata)
build(".")
check(".")
check(".")
build_manual(".")
build_manual(".")
check(".")
build_manual(".")
check(".")
build_manual(".")
build_vignettes(".")
build(".")
build_manual(".")
check(".")
maintainer(Seurat)
library(Seurat)
maintainer(Seurat)
maintainer("Seurat")
check(".")
check(".")
check(".")
build(".")
build_manual(".")
check(".")
build_manual(".")
build(".")
check(".")
build(".")
check(".")
load_all(".")
x=MURP(sdata)
MURPNestedGridPlot(x)
load_all(".")
MURPNestedGridPlot(x)
load_all(".")
MURPNestedGridPlot(x)
check_built(".")
build(".")
check(".")
check(".")
check(".")
?ggplotGrob
check(".")
check(".")
check(".")
check(".")
check(".")
check(".")
build_manual(".")
build(".")
KBicPlot(x)
load_all(".")
KBicPlot(x)
library(ggplot2)
KBicPlot(x)
library(ggplot2)
KBicPlot(x)
KBicPlot(x)
check(".")
check(".")
build(".")
build_manual(".")
KBicPlot(x)
check(".")
build(".")
build_manual(".")
load_all(".")
KBicPlot(x)
load_all(".")
KBicPlot(x)
p = ggplot(df,aes(x = k, y = bic)) +
geom_point(size = 3, alpha = 0.8, colour = "gray") +
geom_vline(xintercept = df$recommended_k, color = "darkgreen",
alpha = 0.8, size = 0.6, linetype = "dashed") +
labs(x = "Number of MURPs / Cell Number", y = "pseudo-BIC") +
theme(panel.background = element_rect(fill='transparent', color="black"),
strip.text = element_text(size = 10),
panel.grid.minor=element_blank(),
panel.grid.major=element_blank(),
panel.border = element_rect(fill='transparent', color='black'),
plot.title = element_text(size = 12.5, hjust = 0), # title
plot.subtitle = element_text(size = 11.5, hjust = 0), # subtitle
legend.key = element_rect( fill = "white"),
axis.title.x = element_text(vjust = -1.5, size = 15, colour = 'black'), # face = "bold"
axis.title.y = element_text(vjust = 1.5, size = 15, colour = 'black'), # face = "bold"
#axis.line = element_line(colour = 'black'),
axis.ticks = element_blank(),
#axis.text.y = element_blank(),
axis.text.x = element_text(vjust = -0.5, size = 12, colour = 'black'),
axis.text.y = element_text(vjust = 0.5, size = 12, colour = 'black'),
legend.text = element_text(vjust = 0.4, size = 15, colour = 'black'),
legend.title = element_text(vjust = 0.4, size = 15, colour = 'black'),
legend.key.size = unit(0.9, "cm") )
load_all(".")
KBicPlot(x)
load_all(".")
KBicPlot(x)
load_all(".")
KBicPlot(x)
load_all(".")
KBicPlot(x)
load_all(".")
KBicPlot(x)
check(".")
build(".")
load_all(".")
MURPNestedGridPlot(x)
load_all(".")
MURPNestedGridPlot(x)
load_all(".")
MURPNestedGridPlot(x)
load_all(".")
MURPNestedGridPlot(x)
load_all(".")
MURPNestedGridPlot(x)
check(".")
check(".")
check(".")
check(".")
check(".")
check(".")
check(".")
check(".")
check(".")
check(".")
check(".")
check(".")
check(".")
check(".")
library(dplyr)
?dplyr
check(".")
library(devtools)
load_all(".")
check(".")
check(".")
build(".")
check(".")
build(".")
check(".")
build(".")
library(devtools)
install_github("haowulab/Wind", build_opts = c("--no-resave-data"))
library(Wind)
vignette("Wind")
data(Y)
??Wind
?Wind
??Wind
data(Zhengmix8eq)
ctStruct = createRef(Y, trueclass)
this_wNMI = wNMI(ctStruct, trueclass, clusterRes)
ctStruct
this_wNMI
dim(Y)
trueclass
length(trueclass)
dim(Y)
plot(ctStruct$hc, xlab="", axes=FALSE, ylab="", ann=FALSE)
methods = names(clusterRes)
allNMI = matrix(0, nrow=length(methods), ncol=2)
rownames(allNMI) = methods
colnames(allNMI) = c("NMI", "wNMI")
for(i in 1:length(clusterRes)) {
allNMI[i,1] = wNMI(ctStruct, trueclass, clusterRes[[i]], FALSE)
allNMI[i,2] = wNMI(ctStruct, trueclass, clusterRes[[i]])
}
barplot(t(allNMI), beside=TRUE, ylim=c(0.4,1.05),
legend.text=TRUE, xpd=FALSE)
this_wNMI
clusterRes
？
?wNMI
allNMI
ctStruct
str(wNMI)
str(ctStruct)
?dcast
?prcomp
library(devtools)
load_all(".")
data(sdata)
result = MURP(Data = sdata, cores = 1, iter = 20, omega = 1/6, seed = 723)
ggplot2::ggsave("bic_plot.pdf", KBicPlot(murpResult = result))
getwd()
library(devtools)
load_all(".")
writeLines(capture.output(sessionInfo()), "sessionInfo.txt")
library(devtools)
check()
check()
check()
check()
check()
build()
library(devtools)
check(".")
build(".")
library(devtools)
check(".")
build(".")
ls()
library(devtools)
load_all(".")
data("sdata")
dim(sdata)
x=sdata
r = MURP(x, omega = 0.1, fast=TRUE)
r$Penalty
r$Loglike
r$k
load_all(".")
r = MURP(x, omega = 0.4, fast=FALSE)
r = MURP(x, omega = 0.6, fast=FALSE)
load_all(".")
check(".")
build(".")
library(devtools)
load_all(".")
check(".")
build(".")
check(".")
build(".")
data(sdata)
MURP(sdata,cluster_iter_max = 10)
?kmeans
MURP(sdata,cluster_iter_max = 1000)
load_all(".")
MURP(sdata,cluster_iter_max = 1000)
MURP(sdata,cluster_iter_max = 100)
library(microbenchmark)
microbenchmark(MURP(sdata, cluster_iter_max=1000),
MURP(sdata, cluster_iter_max=100),
times = 1)
check(".")
build(".")
